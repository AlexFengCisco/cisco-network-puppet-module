General Notes:
* Don't check in the GEMFILE.lock
* The Netscaler module  is a good example of type / provider module for a network device. https://github.com/puppetlabs/puppetlabs-netscaler 
* Add a Changefile, is really helpful for users to see what is going on in each release.
* README should follow standards laid out here https://docs.puppetlabs.com/puppet/latest/reference/modules_documentation.html#readme-template
* metadata.json needs updated, dependencies outlined, links to tickets and project page.
* Double check that apache2 is the license you want.
* clean out .swp .bak files
* Code cleanup and basic fixes. Use rubocop (similar to lint or use lint), example config file in netscaler module (.rubocop.yml). It fixes things like:
  * Align the operands of an expression in an assignment spanning multiple lines.
  * Extra empty line detected at block body end.
  * Assignment Branch Condition size for tacacs_server_encryption_key_set is too high.
* Testing
  * should follow the standard split of unit tests and/or acceptance tests
  * tests should be in the spec folder. following other puppet modules
  * use beaker-rspec instead of beaker for acceptance tests. https://github.com/puppetlabs/beaker/wiki/How-to-Write-a-Beaker-Test-for-a-Module
  * spec_acceptance.rb and spec_acceptance_helper.rb, set up the unit tests and the acceptance tests.
  * leverage travis ci, free unit tests for each pull request. (config files in other puppet modules https://travis-ci.org/puppetlabs/puppetlabs-mysql/)
  * generally there test per provider / function / fact
  * acceptance tests normally follow a CRUD pattern, enable a feature / disable a feature / edit a feature. eg (configure an interface, edit it, disable it) examples in netscaler
* normally there is an install.rb and an init.pp in the lib folder, ala netscaler / f5_rest module. 

* types & providers
  * there is a lot of boiler plate code
    * initialize 
    * prefetch
    * create
    * destroy
    * flush
    * exists
    for netscaler look at lib/puppet/provider/netscaler.rb and lib/puppet/provider/netscaler_*/rest.rb
    They are implemented once and can be overridden if needs be in the specific provider. Each provider starts with:
    require 'puppet/provider/netscaler'
    Puppet::Type.type(:netscaler_route).provide(:rest, parent: Puppet::Provider::Netscaler) do
  * validation is normally done on a per attribute basis in the type, rather than a munge
    eg in a validate do block. ie lib/type/netscaler/server.rb
  * use of a truthy class, would remove alot of code around true/false or on/off enabled/disabled.
    eg lib/puppet/property/netscaler_truthy.rb used in lib/puppet/type/netscaler_server.rb
  * There do not seem to be any attributes that are set on creation, but are unable 

Individual type/provider analysis (all the following have the issues described above)
* cisco_command_config: type is fine, provider is fine (logic looks sensible, barring the suggestions outlined above)
* cisco_interface:  type docs are great, provider is fine
* cisco_interface_ospf:  type docs are great, provider maybe use ternary operators in set_properties. condition ? if_true : if_false
* cisco_ospf:  type docs are great, provider is fine
* cisco_ospf_vrf: type docs are great, provider is fine
* cisco_snmp_community: type fine, provider fine (closer to what is implemented in the netscaler module)
* cisco_snmp_group: type fine, provider fine
* cisco_snmp_server: type fine, provider fine
* cisco_snmp_user: type fine. provider needs the debug removed
* cisco_tacacs_server: type has validate which is great, provider looks closer to what is implemented in the netscaler module (follows some of the suggestions above).
* cisco_tacacs_server_host: type has validate which is great, provider  looks closer to what is implemented in the netscaler module (follows some of the suggestions above). 
* cisco_vlan: type is state or shutdown the same as ensure ??, provider shutdown is not mentioned
* cisco_vtp: type password in plain text will be seen when changes are made to the resource, provider is fine
